(()=>{"use strict";var e,o,r,t,n={656:(e,o,r)=>{r.d(o,{c:()=>l});const t=require("mysql2/promise");var n=r.n(t);const s=process.env.HOST,a=process.env.DBUSERNAME,i=process.env.PASSWORD,_=process.env.DATABASE,c=Number(process.env.DBPORT);console.log("[MySQL] Connecting...");const d=n().createPool({connectionLimit:100,host:s,port:c,user:a,password:i,database:_,multipleStatements:!0});console.log(`[MySQL] Connection to ${_} established.`),console.log("[MySQL] Initializing database...");const l=d},12:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{C:()=>l,O:()=>d});var n=r(656),s=r(860),a=r(484),i=r(968),_=r(56),c=r(892);const e=await n.c.getConnection(),d=async(o,r)=>{const t=o.params.user_id,n=o.params.room_id,a=o.params.hist;let i,d,l,u;i=void 0===o.params.from||null===o.params.from?"0":o.params.from,d=void 0===o.params.to||null===o.params.to?"2147483647":o.params.to,"true"===a&&i?(u=s.E,l=[n,i,d,n,i,d,n,i,d,n,i,d]):(u=c.Q,l=[n,n,n,n]);try{const o=(await e.query(u,l))[0];if(0===o.length)return r.status(500).send("0 measurments availiable for this room");if(o[0].user_id!==t)return r.status(401).send("Room not found or unauthorized");const n=(0,_.w)(o)[0].locations[0].rooms[0];return r.status(200).json(n)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},l=async(o,r)=>{const t=a._;try{const n=o.params.user_id,s=(await e.query(t,n))[0],a=(0,i.S)(s)[0];return r.status(200).json(a)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},400:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{U:()=>c,a:()=>d});var n=r(488),s=r.n(n),a=r(656),i=r(784),_=r.n(i);const e=await a.c.getConnection(),c=async(o,r)=>{if(!(o.params.room_id&&o.body.controller_id&&o.body.device_pass&&o.body.probe_id&&o.body.probe_type))return r.status(400).send("missing required params");const t=o.params.user_id,n=await e.execute("SELECT users.user_id, controller.controller_id, probe.probe_id\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      LEFT JOIN probe\n        ON controller.controller_id = probe.controller_id\n      WHERE room.room_id = ?",[o.params.room_id]);if(0===n[0].length)return r.status(401).send("room not found");const a=n[0][0].user_id;if(a!==t||void 0===a)return r.status(401).send("unauthorized");if(0!==(await e.execute("SELECT *\n      FROM controller\n      WHERE controller_id = ?",[o.body.controller_id]))[0].length)return r.status(401).send("controller is already associated with an account");if(0!==(await e.execute("SELECT *\n      FROM probe\n      WHERE probe_id = ?",[o.body.probe_id]))[0].length)return r.status(401).send("probe is already associated with an account");if(0!==(await e.execute("SELECT * \n      FROM device\n      WHERE device_controller_id = ?",[o.body.controller_id]))[0].length)return r.status(401).send("device is already authenticated");const i=[[o.params.room_id,o.body.controller_id?.substring(0,100),o.body.controller_name?.substring(0,50)||null,o.body.controller_serial?.substring(0,50)||null,o.body.controller_make?.substring(0,50)||null,o.body.controller_model?.substring(0,50)||null]],c=[[o.body.controller_id,o.body.probe_id?.substring(0,100),o.body.probe_make?.substring(0,50)||null,o.body.probe_model?.substring(0,50)||null,o.body.probe_type?.substring(0,50)||null]],d=await _().hash(o.body.device_pass,13),l=[[a,s()(),o.body.controller_id,d]];try{return await e.query("\n            INSERT INTO controller (\n                room_id,\n                controller_id,\n                controller_name,\n                controller_serial,\n                controller_make,\n                controller_model\n            )\n            VALUES ?;\n        ",[i]),await e.query("\n            INSERT INTO probe (\n                controller_id,\n                probe_id,\n                probe_make,\n                probe_model,\n                probe_type\n            )\n            VALUES ?;\n        ",[c]),await e.query("INSERT INTO device (user_id, device_id, device_controller_id, device_pass) VALUES ?;",[l]),r.status(200).send("Successfully added device: "+o.body.controller_id)}catch(e){return r.status(500).send(e+"Failed to add device")}finally{e.release()}},d=async(o,r)=>{try{const t=o.params.user_id,n=await e.execute("SELECT users.user_id, controller.controller_id\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n        LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      WHERE controller.controller_id = ?",[o.params.controller_id]);if(0===n[0].length)return r.status(500).send("Controller not found");if(n[0][0].user_id!==t)return r.status(401).send("Unauthorized");const s=["room_id","controller_name"],a=s.map((e=>`${e} = ?`)),i=s.map((e=>{const r=o.body[e];return null!=r?r:null})),_=`UPDATE controller SET ${a.join(", ")} WHERE controller_id = ?`;i.push(o.params.controller_id);const c=e.format(_,i),[d]=await e.execute(c);if(0===d.affectedRows)return r.status(404).send("No changes made");const[l]=await e.execute("SELECT * FROM controller WHERE controller_id = ?",[o.params.controller_id]),u=l;return r.status(200).json(u)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},108:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{S:()=>_,q:()=>i});var n=r(488),s=r.n(n),a=r(656);const e=await a.c.getConnection(),i=async(o,r)=>{try{const t=o.params.user_id;if(!o.body.location_title)return r.status(400).send("Missing required params");const n=await e.execute("SELECT users.user_id, location.location_title\n          FROM users\n          LEFT JOIN location\n            ON users.user_id = location.user_id\n          WHERE users.user_id = ?",[t]);if(0===n[0].length||null===n.user_id)return r.status(400).send("user not authorizeed");if(n[0].map((e=>e.location_title)).includes(o.body.location_title))return r.status(400).send("this user already has a location with the title: "+o.body.location_title);const a="INSERT INTO location (user_id, location_id, location_title) VALUES ?;",i=s()(),_=o.body.location_title,c=[[t,i,_?.substring(0,50)||null]];return await e.query(a,[c]),r.status(200).send("New location created! Location_id:"+i)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},_=async(o,r)=>{if(!o.body.location_title)return r.status(400).send("Missing required params");const t=o.params.user_id,n=await e.execute("SELECT users.user_id, location.location_id, location.location_title\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      WHERE users.user_id = ?",[t]);if(0===n[0].length||null===n.user_id)return r.status(400).send("user not authorized");if(!n[0].map((e=>e.location_id)).includes(o.params.location_id))return r.status(400).send("cannot rename location that does not exist");if(n[0].map((e=>e.location_title)).includes(o.body.location_title))return r.status(400).send("this user already has a location with the title: "+o.body.location_title);const s=["location_title"],a=s.map((e=>`${e} = ?`)),i=s.map((e=>{const r=o.body[e];return null!=r?r:null})),_=`UPDATE location SET ${a.join(", ")} WHERE location_id = ? AND location.user_id = ?`;i.push(o.params.location_id,t);try{const n=e.format(_,i),[s]=await e.query(n);if(0===s.affectedRows)return r.status(404).send("Location not found or unauthorized");const[a]=await e.execute("SELECT * FROM location WHERE location_id = ? AND location.user_id = ?;",[o.params.location_id,t]),c=a;return r.status(200).json(c)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},292:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{G:()=>d,M:()=>c});var n=r(488),s=r.n(n),a=r(656),i=r(784),_=r.n(i);const e=await a.c.getConnection(),c=async(o,r)=>{try{const t=o.params.user_id,n=o.params.probe_id,s=o.params.hist;let a,i,_,c;a=void 0===o.params.from||null===o.params.from?"0":o.params.from,i=void 0===o.params.to||null===o.params.to?"2147483647":o.params.to,"true"===s&&a?(c="SELECT users.user_id, controller.controller_id, probe_co2.probe_id, probe_co2.probe_co2_id AS measure_id, probe_co2.probe_co2_measure AS measure, UNIX_TIMESTAMP(probe_co2.probe_c02_created_at) AS measure_created_at\n        FROM users\n        LEFT JOIN location\n          ON users.user_id = location.user_id\n        LEFT JOIN room\n          ON location.location_id = room.location_id\n        LEFT JOIN controller\n          ON room.room_id = controller.room_id\n        LEFT JOIN probe\n          ON controller.controller_id = probe.controller_id\n        LEFT JOIN probe_co2\n          ON probe.probe_id = probe_co2.probe_id\n          WHERE (probe.probe_id = ? AND probe_c02_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)) \n          ORDER BY measure_created_at DESC;",_=[n,a,i]):(c="SELECT users.user_id, controller.controller_id, probe_co2.probe_id, probe_co2.probe_co2_id AS measure_id, probe_co2.probe_co2_measure AS measure, UNIX_TIMESTAMP(probe_co2.probe_c02_created_at) AS measure_created_at\n        FROM users\n        LEFT JOIN location\n          ON users.user_id = location.user_id\n        LEFT JOIN room\n          ON location.location_id = room.location_id\n        LEFT JOIN controller\n          ON room.room_id = controller.room_id\n        LEFT JOIN probe\n          ON controller.controller_id = probe.controller_id\n        LEFT JOIN probe_co2\n          ON probe.probe_id = probe_co2.probe_id\n          WHERE probe.probe_id = ? ORDER BY measure_created_at DESC LIMIT 1;",_=[n]);const d=await e.query(c,_);return 0===d[0].length||null===d[0][0].probe_id?r.status(500).send("0 measurements available on this device, or you do not have permission to view the measurements from this device"):d[0][0].user_id!==t?r.status(401).send("You do not have permission to view the measurements from this device"):r.status(200).json(d[0])}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},d=async(o,r)=>{try{const{controller_id:t,device_pass:n,probe_co2_measure:a}=o.body;if(!t||!n||!a)return r.status(400).send("Missing required params");const i=await e.execute("SELECT *\n        FROM device\n        WHERE device_controller_id = ?;",[t]),c=await e.execute("SELECT *\n            FROM probe\n            WHERE probe_id = ?;",[o.params.probe_id]);if(0===i[0].length)return r.status(400).send("device not added to aproved devices");if(!await _().compare(n,i[0][0].device_pass))return r.status(400).send("device access denied");if(0===c[0].length)return r.status(400).send("probe does not exist on this device");const d="\n            INSERT INTO probe_co2 (\n                probe_id,\n                probe_co2_id,\n                probe_co2_measure\n            )\n            VALUES ?;\n        ",l=s()(),u=[[o.params.probe_id,l,a]];return await e.query(d,[u]),r.status(200).json("controllerId: "+t+" Type: co2  Measure: "+a)}catch(e){return r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},536:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{Q:()=>d,q:()=>c});var n=r(488),s=r.n(n),a=r(656),i=r(784),_=r.n(i);const e=await a.c.getConnection(),c=async(o,r)=>{try{const t=o.params.user_id,n=o.params.probe_id,s=o.params.hist;let a,i,_,c;a=void 0===o.params.from||null===o.params.from?"0":o.params.from,i=void 0===o.params.to||null===o.params.to?"2147483647":o.params.to,"true"===s&&a?(c="SELECT users.user_id, controller.controller_id, probe_hum.probe_id, probe_hum.probe_hum_id AS measure_id, probe_hum.probe_hum_measure AS measure, UNIX_TIMESTAMP(probe_hum.probe_hum_created_at) AS measure_created_at\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      LEFT JOIN probe\n        ON controller.controller_id = probe.controller_id\n      LEFT JOIN probe_hum\n        ON probe.probe_id = probe_hum.probe_id\n        WHERE (probe.probe_id = ? AND probe_hum_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)) \n        ORDER BY measure_created_at DESC;",_=[n,a,i]):(c="SELECT users.user_id, controller.controller_id, probe_hum.probe_id, probe_hum.probe_hum_id AS measure_id, probe_hum.probe_hum_measure AS measure, UNIX_TIMESTAMP(probe_hum.probe_hum_created_at) AS measure_created_at\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      LEFT JOIN probe\n        ON controller.controller_id = probe.controller_id\n      LEFT JOIN probe_hum\n        ON probe.probe_id = probe_hum.probe_id\n      WHERE probe.probe_id = ? ORDER BY measure_created_at DESC LIMIT 1;",_=[n]);const d=await e.query(c,_);return 0===d[0].length||null===d[0][0].probe_id?r.status(400).send("0 measurements available on this device, or you do not have permission to view the measurements from this device"):d[0][0].user_id!==t?r.status(401).send("You do not have permission to view the measurements from this device"):r.status(200).json(d[0])}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},d=async(o,r)=>{try{const{controller_id:t,device_pass:n,probe_hum_measure:a}=o.body;if(!t||!n||!a)return r.status(400).send("Missing required params");const i=await e.execute("SELECT *\n        FROM device\n        WHERE device_controller_id = ?;",[t]),c=await e.execute("SELECT *\n            FROM probe\n            WHERE probe_id = ?;",[o.params.probe_id]);if(!i[0].length)return r.status(400).send("device not added to aproved devices");if(!await _().compare(n,i[0][0].device_pass))return r.status(400).send("device access denied");if(0===c[0].length)return r.status(400).send("probe does not exist on this device");const d="\n            INSERT INTO probe_hum (\n                probe_id,\n                probe_hum_id,\n                probe_hum_measure\n            )\n            VALUES ?;\n        ",l=s()(),u=[[o.params.probe_id,l,a]];return await e.query(d,[u]),r.status(200).json("controllerId: "+t+" Type: hum  Measure: "+a)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},755:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{M:()=>c,c:()=>d});var n=r(488),s=r.n(n),a=r(656),i=r(784),_=r.n(i);const e=await a.c.getConnection(),c=async(o,r)=>{try{const t=o.params.user_id,n=o.params.probe_id,s=o.params.hist;let a,i,_,c;a=void 0===o.params.from||null===o.params.from?"0":o.params.from,i=void 0===o.params.to||null===o.params.to?"2147483647":o.params.to,"true"===s&&a?(c="SELECT users.user_id, controller.controller_id, probe_ppm.probe_id, probe_ppm.probe_ppm_id AS measure_id, probe_ppm.probe_ppm_measure AS measure, UNIX_TIMESTAMP(probe_ppm.probe_ppm_created_at) AS measure_created_at\n    FROM users\n    LEFT JOIN location\n      ON users.user_id = location.user_id\n    LEFT JOIN room\n      ON location.location_id = room.location_id\n    LEFT JOIN controller\n      ON room.room_id = controller.room_id\n    LEFT JOIN probe\n      ON controller.controller_id = probe.controller_id\n    LEFT JOIN probe_ppm\n      ON probe.probe_id = probe_ppm.probe_id\n      WHERE (probe.probe_id = ? AND probe_ppm_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)) \n      ORDER BY measure_created_at DESC;",_=[n,a,i]):(c="SELECT users.user_id, controller.controller_id, probe_ppm.probe_id, probe_ppm.probe_ppm_id AS measure_id, probe_ppm.probe_ppm_measure AS measure, UNIX_TIMESTAMP(probe_ppm.probe_ppm_created_at) AS measure_created_at\n    FROM users\n    LEFT JOIN location\n      ON users.user_id = location.user_id\n    LEFT JOIN room\n      ON location.location_id = room.location_id\n    LEFT JOIN controller\n      ON room.room_id = controller.room_id\n    LEFT JOIN probe\n      ON controller.controller_id = probe.controller_id\n    LEFT JOIN probe_ppm\n      ON probe.probe_id = probe_ppm.probe_id\n    WHERE probe.probe_id = ? ORDER BY measure_created_at DESC LIMIT 1;",_=[n]);const d=await e.query(c,_);return 0===d[0].length||null===d[0][0].probe_id?r.status(500).send("0 measurements available on this device, or you do not have permission to view the measurements from this device"):d[0][0].user_id!==t?r.status(401).send("You do not have permission to view the measurements from this device"):r.status(200).json(d[0])}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},d=async(o,r)=>{try{const{controller_id:t,device_pass:n,probe_ppm_measure:a}=o.body;if(!t||!n||!a)return r.status(400).send("Missing required params");const i=await e.execute("SELECT *\n        FROM device\n        WHERE device_controller_id = ?;",[t]),c=await e.execute("SELECT *\n        FROM probe\n        WHERE probe_id = ?;",[o.params.probe_id]);if(0===i[0].length)return r.status(400).send("device not added to aproved devices");if(!await _().compare(n,i[0][0].device_pass))return r.status(400).send("device access denied");if(0===c[0].length)return r.status(400).send("probe does not exist on this device");const d="\n            INSERT INTO probe_ppm (\n                probe_id,\n                probe_ppm_id,\n                probe_ppm_measure\n            )\n            VALUES ?;\n        ",l=s()(),u=[[o.params.probe_id,l,a]];return await e.query(d,[u]),r.status(200).json("controllerId: "+t+" Type: ppm  Measure: "+a)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},692:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{k:()=>d,y:()=>c});var n=r(488),s=r.n(n),a=r(656),i=r(784),_=r.n(i);const e=await a.c.getConnection(),c=async(o,r)=>{try{const t=o.params.user_id,n=o.params.probe_id,s=o.params.hist;let a,i,_,c;a=void 0===o.params.from||null===o.params.from?"0":o.params.from,i=void 0===o.params.to||null===o.params.to?"2147483647":o.params.to,"true"===s&&a?(c="SELECT users.user_id, controller.controller_id, probe_therm.probe_id, probe_therm.probe_therm_id AS measure_id, probe_therm.probe_therm_measure AS measure, UNIX_TIMESTAMP(probe_therm.probe_therm_created_at) AS measure_created_at\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      LEFT JOIN probe\n        ON controller.controller_id = probe.controller_id\n      LEFT JOIN probe_therm\n        ON probe.probe_id = probe_therm.probe_id\n      WHERE (probe.probe_id = ? AND probe_therm_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)) \n      ORDER BY measure_created_at DESC;",_=[n,a,i]):(console.log("start"),c="SELECT users.user_id, controller.controller_id, probe_therm.probe_id, probe_therm.probe_therm_id AS measure_id, probe_therm.probe_therm_measure AS measure, UNIX_TIMESTAMP(probe_therm.probe_therm_created_at) AS measure_created_at\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      LEFT JOIN controller\n        ON room.room_id = controller.room_id\n      LEFT JOIN probe\n        ON controller.controller_id = probe.controller_id\n      LEFT JOIN probe_therm\n        ON probe.probe_id = probe_therm.probe_id\n      WHERE probe.probe_id = ? ORDER BY measure_created_at DESC LIMIT 1;",_=[n]);const d=await e.query(c,_);return 0===d[0].length||null===d[0][0].probe_id?r.status(500).send("0 measurements available on this device, or you do not have permission to view the measurements from this device"):d[0][0].user_id!==t?r.status(401).send("You do not have permission to view the measurements from this device"):r.status(200).json(d[0])}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},d=async(o,r)=>{try{const{controller_id:t,device_pass:n,probe_therm_measure:a}=o.body;if(!t||!n||!a)return r.status(400).send("Missing required params");const i=await e.execute("SELECT *\n        FROM device\n        WHERE device_controller_id = ?;",[t]),c=await e.execute("SELECT *\n            FROM probe\n            WHERE probe_id = ?;",[o.params.probe_id]);if(!i[0].length)return r.status(400).send("device not added to aproved devices");if(!await _().compare(n,i[0][0].device_pass))return r.status(400).send("device access denied");if(0===c[0].length)return r.status(400).send("probe does not exist on this device");const d="\n            INSERT INTO probe_therm (\n                probe_id,\n                probe_therm_id,\n                probe_therm_measure\n            )\n            VALUES ?;\n        ",l=s()(),u=[[o.params.probe_id,l,a]];return await e.query(d,[u]),r.status(200).json("controllerId: "+t+" Type: therm  Measure: "+a)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},588:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{M:()=>_,q:()=>i});var n=r(488),s=r.n(n),a=r(656);const e=await a.c.getConnection(),i=async(o,r)=>{try{const t=o.params.user_id;if(!o.params.location_id||!o.body.room_title)return r.status(400).send("Missing required params");const n=await e.execute("SELECT users.user_id, location.location_id, room.room_id, room.room_title\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      WHERE location.location_id = ?",[o.params.location_id]);if(0===n[0].length||null===n.location_id)return r.status(400).send("location not found or unauthorized");if(n[0][0].user_id!==t)return r.status(400).send("location not found or unauthorized");if(n[0].map((e=>e.room_title)).includes(o.body.room_title))return r.status(400).send("this location already includes a room with the title: "+o.body.room_title);const a="INSERT INTO room (location_id, room_id, room_title) VALUES ?;",i=s()(),_=[[o.params.location_id,i,o.body.room_title?.substring(0,50)||null]];return await e.query(a,[_]),r.status(200).send("New room created! Room_id: "+i)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}},_=async(o,r)=>{try{if(!o.params.room_id||!o.body.room_title)return r.status(400).send("Missing required params");const t=o.params.user_id,n=await e.execute("SELECT users.user_id,  location.location_id, room.room_id, room.room_title\n      FROM users\n      LEFT JOIN location\n        ON users.user_id = location.user_id\n      LEFT JOIN room\n        ON location.location_id = room.location_id\n      WHERE room.room_id = ?",[o.params.room_id]);if(0===n[0].length)return r.status(500).send("Room not found");if(n[0][0].user_id!==t)return r.status(401).send("Unauthorized");if(n[0].map((e=>e.room_title)).includes(o.body.room_title))return r.status(400).send("this location already includes a room with the title: "+o.body.room_title);const s=["room_title"],a=s.map((e=>`${e} = ?`)),i=s.map((e=>{const r=o.body[e];return null!=r?r:null})),_=`UPDATE room SET ${a.join(", ")} WHERE room_id = ?`;i.push(o.params.room_id);const c=e.format(_,i),[d]=await e.execute(c);if(0===d.affectedRows)return r.status(404).send("No changes made");const[l]=await e.execute("SELECT * FROM room WHERE room_id = ?",[o.params.room_id]),u=l;return console.log(l),r.status(200).json(u)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},524:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{CE:()=>p,Gy:()=>u,YL:()=>b,uS:()=>m});var n=r(488),s=r.n(n),a=r(656),i=r(480),_=r.n(i),c=r(784),d=r.n(c),l=r(8);const e=await a.c.getConnection(),u=async(o,r)=>{if(!o.body.user_email||!o.body.user_pass)return r.status(400).send("Missing required params");try{const t="SELECT * FROM users WHERE user_email = ?;",{user_email:n,user_pass:a}=o.body,i=await d().hash(a,13);if((await e.query(t,n))[0].length)return r.status(400).send("email is already associated with an account");{const t="INSERT INTO users (user_id, user_email, user_pass, user_company_name) VALUES ?;",a=s()();let _=o.body.user_company_name;null==_&&(_="Personal");const c=[[a,n,i,_]];await e.query(t,[c]);const d="INSERT INTO location (user_id, location_id, location_title) VALUES ?;",l=s()(),u=[[a,l,_]];await e.query(d,[u]);const p="INSERT INTO room (location_id, room_id, room_title) VALUES ?;",m=[[l,s()(),"Mixer"],[l,s()(),"Steamer"],[l,s()(),"Lab"],[l,s()(),"Incubation"]];return await e.query(p,[m]),r.status(200).send("User created! user_id: "+a)}}catch(e){return r.status(500).send(e+"User creation failed")}finally{e.release()}},p=async(o,r)=>{if(!o.body.user_email||!o.body.user_pass)return r.status(400).send("Missing required params");try{const{user_email:t,user_pass:n}=o.body,s="SELECT * FROM users WHERE user_email = ?;",a=await e.query(s,t);if(!a[0].length||null===a[0][0].user_email)return r.status(400).send("Incorrect username or password");if(!await d().compare(n,a[0][0].user_pass))return r.status(400).send("Incorrect username or password");if(!l.m)return r.status(500).send("Access token not found");const i=a[0][0].user_id,c=_().sign({id:i},l.m,{expiresIn:1800}),u=_().sign({id:i},l.m,{expiresIn:"8h"});r.cookie("x-refresh-token",u,{httpOnly:!0,sameSite:"strict"}),r.set("Access-Control-Expose-Headers","x-access-token"),r.header("x-access-token",c).json("Logged in! user_id: "+i)}catch(e){return r.status(500).send("Unable to log in")}finally{e.release()}},m=async(e,o)=>{const r=e.cookies["x-refresh-token"];if(!r)return o.status(401).send("Access Denied. No refresh token provided.");try{const e=_().verify(r,l.m),t=_().sign({id:e.id},l.m,{expiresIn:1800}),n=_().sign({id:e.id},l.m,{expiresIn:"8h"});o.cookie("x-refresh-token",n,{httpOnly:!0,sameSite:"strict"}).set("Access-Control-Expose-Headers","x-access-token").header("x-access-token",t).send(e.id)}catch(e){return o.status(400).send("Invalid refresh token.")}},b=async(o,r)=>{if(!o.body.user_pass)return r.status(400).send("Missing required params");const t=o.params.user_id,n=await e.execute("SELECT user_email FROM users"),s=await e.execute("SELECT * FROM users WHERE user_id = ?",[t]);if(0===s[0].length||null===s.user_id)return r.status(400).send("user not authorized");const a=s[0][0].user_email,i=s[0][0].user_pass,_=o.body.user_pass,c=s[0][0].user_company_name,l=o.body.new_user_email,u=o.body.new_user_pass,p=o.body.new_user_company_name;let m=a,b=i,E=c;if(!await d().compare(_,i))return r.status(400).send("Incorrect Password");if(null!=l){if(n[0].map((e=>e.user_email)).includes(l)&&l!==a)return r.status(400).send("A user with this email already exists: "+o.body.new_user_email);m=l}null!=u&&(b=await d().hash(u,13)),void 0!==p&&null!==l&&(E=p);const N=[m,b,E],O=`UPDATE users SET ${["user_email","user_pass","user_company_name"].map((e=>`${e} = ?`)).join(", ")} WHERE user_id = ?`;N.push(t);try{const o=e.format(O,N),[n]=await e.query(o);if(0===n.affectedRows)return r.status(404).send("User not found or unauthorized");const[s]=await e.execute("SELECT * FROM users WHERE user_id = ?",[t]),a=s;return r.status(200).json(a)}catch(e){return console.error(e),r.status(500).send(e)}finally{e.release()}};t()}catch(e){t(e)}}),1)},56:(e,o,r)=>{r.d(o,{w:()=>t});const t=e=>function(e){const o=[];return e.forEach((e=>{const{user_id:r,user_created_at:t,location_id:n,location_title:s,location_created_at:a,room_id:i,room_title:_,room_created_at:c,controller_id:d,controller_name:l,controller_serial:u,controller_make:p,controller_model:m,controller_created_at:b,probe_id:E,probe_make:N,probe_model:O,probe_type:h,probe_created_at:T,measure_id:I,measure:y,measure_created_at:L}=e;let S=o.find((e=>e.user_id===r));S||(S={user_id:r,user_created_at:t,locations:[]},o.push(S));let F=S.locations.find((e=>e.location_id===n));F||(F={location_id:n,location_title:s,location_created_at:a,rooms:[]},null!==n&&S.locations.push(F));let f=F.rooms.find((e=>e.room_id===i));f||(f={room_id:i,room_title:_,room_created_at:c,controllers:[]},null!==i&&F.rooms.push(f));let R=f.controllers.find((e=>e.controller_id===d));R||(R={controller_id:d,controller_name:l,controller_serial:u,controller_make:p,controller_model:m,controller_created_at:b,probes:[]},null!==d&&f.controllers.push(R));let v=R.probes.find((e=>e.probe_id===E));v||(v={probe_id:E,probe_make:N,probe_model:O,probe_type:h,probe_created_at:T,measurements:[]},null!==E&&R.probes.push(v)),null!==y&&v.measurements.push({measure_id:I,measure:y,measure_created_at:L})})),o}(e)},968:(e,o,r)=>{r.d(o,{S:()=>t});const t=e=>function(e){const o=[];return e.forEach((e=>{const{user_id:r,user_email:t,user_pass:n,user_company_name:s,user_created_at:a,location_id:i,location_title:_,location_created_at:c,room_id:d,room_title:l,room_created_at:u,controller_id:p,controller_name:m,controller_serial:b,controller_make:E,controller_model:N,controller_created_at:O,probe_id:h,probe_make:T,probe_model:I,probe_type:y,probe_created_at:L}=e;let S=o.find((e=>e.user_id===r));S||(S={user_id:r,user_email:t,user_pass:n,user_company_name:s,user_created_at:a,locations:[]},o.push(S));let F=S.locations.find((e=>e.location_id===i));F||(F={location_id:i,location_title:_,location_created_at:c,rooms:[]},null!==i&&S.locations.push(F));let f=F.rooms.find((e=>e.room_id===d));f||(f={room_id:d,room_title:l,room_created_at:u,controllers:[]},null!==d&&F.rooms.push(f));let R=f.controllers.find((e=>e.controller_id===p));R||(R={controller_id:p,controller_name:m,controller_serial:b,controller_make:E,controller_model:N,controller_created_at:O,probes:[]},null!==p&&f.controllers.push(R)),null!==h&&R.probes.push({probe_id:h,probe_make:T,probe_model:I,probe_type:y,probe_created_at:L})})),o}(e)},740:(e,o,r)=>{r.a(e,(async(e,o)=>{try{var t=r(224),n=r.n(t),s=r(518),a=r.n(s),i=(r(192),r(116)),_=r(823),c=r(652),d=r(708),l=r(676),u=r(687),p=r(644),m=r(295),b=r(76),E=r(8),N=r(68),O=r.n(N),h=e([i,_,c,d,l,u,p,m,b]);[i,_,c,d,l,u,p,m,b]=h.then?(await h)():h;const T=n()();T.use(a()()),T.use(n().json()),T.use(O()()),T.get("/isUserAuth",E.I,((e,o)=>{o.send("You are authenticated Congrats:")})),T.use("/api",m.c),T.use("/api/user",i.c),T.use("/api/location",_.c),T.use("/api/room",c.c),T.use("/api/device",b.c),T.use("/api/co2",d.c),T.use("/api/hum",l.c),T.use("/api/ppm",u.c),T.use("/api/temp",p.c);const I=process.env.PORT||3e3;T.listen(I,(()=>{console.log(`Express server started on http://localhost:${I}`)})),o()}catch(e){o(e)}}))},8:(e,o,r)=>{r.d(o,{I:()=>a,m:()=>s});var t=r(480),n=r.n(t);const s=process.env.access_token,a=(e,o,r)=>{const t=e.headers["x-access-token"],a=e.cookies["x-refresh-token"];if(!t&&!a)return o.status(401).send("Access Denied. No token provided.");try{const o=n().verify(t,s);e.params.user_id=o.id,r()}catch(e){if(!a)return o.status(401).send("Access Denied. No refresh token provided.");try{const e=n().verify(a,s),r=n().sign({id:e.id},s,{expiresIn:1800});o.set("Access-Control-Expose-Headers","x-access-token").header("x-access-token",r).send("Token Expired: New token returned in header")}catch(e){return o.status(401).send("Invalid Token. Please Login.")}}}},860:(e,o,r)=>{r.d(o,{E:()=>t});const t="\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_co2.probe_co2_id AS measure_id, probe_co2.probe_co2_measure AS measure, UNIX_TIMESTAMP(probe_co2.probe_c02_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_co2_measure IS NOT NULL AND room.room_id = ? AND probe_c02_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?))\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_hum.probe_hum_id AS measure_id, probe_hum.probe_hum_measure AS measure, UNIX_TIMESTAMP(probe_hum.probe_hum_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_hum_measure IS NOT NULL AND room.room_id = ? AND probe_hum_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?))\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_ppm.probe_ppm_id AS measure_id, probe_ppm.probe_ppm_measure AS measure, UNIX_TIMESTAMP(probe_ppm.probe_ppm_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n    WHERE probe_ppm_measure IS NOT NULL AND room.room_id = ? AND probe_ppm_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?))\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_therm.probe_therm_id AS measure_id, probe_therm.probe_therm_measure AS measure, UNIX_TIMESTAMP(probe_therm.probe_therm_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_therm_measure IS NOT NULL AND room.room_id = ? AND probe_therm_created_at BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)) ORDER BY measure_created_at DESC;"},892:(e,o,r)=>{r.d(o,{Q:()=>t});const t="\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_co2.probe_co2_id AS measure_id, probe_co2.probe_co2_measure AS measure, UNIX_TIMESTAMP(probe_co2.probe_c02_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_co2_measure IS NOT NULL AND room.room_id = ? ORDER BY measure_created_at DESC LIMIT 1)\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_hum.probe_hum_id AS measure_id, probe_hum.probe_hum_measure AS measure, UNIX_TIMESTAMP(probe_hum.probe_hum_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_hum_measure IS NOT NULL AND room.room_id = ? ORDER BY measure_created_at DESC LIMIT 1)\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_ppm.probe_ppm_id AS measure_id, probe_ppm.probe_ppm_measure AS measure, UNIX_TIMESTAMP(probe_ppm.probe_ppm_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n    WHERE probe_ppm_measure IS NOT NULL AND room.room_id = ? ORDER BY measure_created_at DESC LIMIT 1)\nUNION ALL\n(SELECT users.user_id, room.*, controller.*, probe.*, probe_therm.probe_therm_id AS measure_id, probe_therm.probe_therm_measure AS measure, UNIX_TIMESTAMP(probe_therm.probe_therm_created_at) AS measure_created_at\n  FROM users\n  LEFT JOIN location\n\tON users.user_id = location.user_id\n  LEFT JOIN room\n\tON location.location_id = room.location_id\n  LEFT JOIN controller\n    ON room.room_id = controller.room_id\n  LEFT JOIN probe\n    ON controller.controller_id = probe.controller_id\n  LEFT JOIN probe_co2\n    ON probe.probe_id = probe_co2.probe_id\n  LEFT JOIN probe_hum\n    ON probe.probe_id = probe_hum.probe_id\n  LEFT JOIN probe_ppm\n    ON probe.probe_id = probe_ppm.probe_id\n  LEFT JOIN probe_therm\n    ON probe.probe_id = probe_therm.probe_id\n  WHERE probe_therm_measure IS NOT NULL AND room.room_id = ?  ORDER BY measure_created_at DESC LIMIT 1);"},484:(e,o,r)=>{r.d(o,{_:()=>t});const t="SELECT\n  users.user_id,\n  users.user_email,\n  users.user_pass,\n  users.user_company_name,\n  users.user_created_at,\n  location.location_id,\n  location.location_title,\n  location.location_created_at,\n  room.room_id,\n  room.room_title,\n  room.room_created_at,\n  controller.controller_id,\n  controller.controller_name,\n  controller.controller_serial,\n  controller.controller_make,\n  controller.controller_model,\n  controller.controller_created_at,\n  probe.probe_id,\n  probe.probe_make,\n  probe.probe_model,\n  probe.probe_type,\n  probe.probe_created_at\nFROM users \nLEFT JOIN location\n  ON users.user_id = location.user_id\nLEFT JOIN room\n  ON location.location_id = room.location_id\nLEFT JOIN controller\n  ON room.room_id = controller.room_id\nLEFT JOIN probe\n  ON controller.controller_id = probe.controller_id\nWHERE users.user_id = ? ORDER BY user_company_name, location_title, room_title, controller_created_at, probe_created_at DESC;"},295:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(12),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.get("/report",a.I,s.C),_.get("/measure/:room_id/:hist/:from?/:to?",a.I,s.O);const c=_;t()}catch(e){t(e)}}))},76:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(8),a=r(400),i=e([a]);a=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.post("/new/:room_id",s.I,a.U),_.put("/update/:controller_id",s.I,a.a);const c=_;t()}catch(e){t(e)}}))},823:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(108),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.post("/new",a.I,s.q),_.put("/update/:location_id",a.I,s.S);const c=_;t()}catch(e){t(e)}}))},708:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(292),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.get("/:probe_id/:hist/:from?/:to?",a.I,s.M),_.post("/new/:probe_id",s.G);const c=_;t()}catch(e){t(e)}}))},676:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(536),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.get("/:probe_id/:hist/:from?/:to?",a.I,s.q),_.post("/new/:probe_id",s.Q);const c=_;t()}catch(e){t(e)}}))},687:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(755),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.get("/:probe_id/:hist/:from?/:to?",a.I,s.M),_.post("/new/:probe_id",s.c);const c=_;t()}catch(e){t(e)}}))},644:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(692),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.get("/:probe_id/:hist/:from?/:to?",a.I,s.y),_.post("/new/:probe_id",s.k);const c=_;t()}catch(e){t(e)}}))},652:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(588),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.post("/new/:location_id",a.I,s.q),_.put("/update/:room_id",a.I,s.M);const c=_;t()}catch(e){t(e)}}))},116:(e,o,r)=>{r.a(e,(async(e,t)=>{try{r.d(o,{c:()=>c});var n=r(224),s=r(524),a=r(8),i=e([s]);s=(i.then?(await i)():i)[0];const _=(0,n.Router)();_.post("/signup",s.Gy),_.post("/login",s.CE),_.post("/refresh",s.uS),_.put("/update",a.I,s.YL);const c=_;t()}catch(e){t(e)}}))},784:e=>{e.exports=require("bcrypt")},68:e=>{e.exports=require("cookie-parser")},518:e=>{e.exports=require("cors")},192:e=>{e.exports=require("dotenv/config")},224:e=>{e.exports=require("express")},480:e=>{e.exports=require("jsonwebtoken")},488:e=>{e.exports=require("uniqid")}},s={};function a(e){var o=s[e];if(void 0!==o)return o.exports;var r=s[e]={exports:{}};return n[e](r,r.exports,a),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",o="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",t=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(n,s,a)=>{var i;a&&((i=[]).d=-1);var _,c,d,l=new Set,u=n.exports,p=new Promise(((e,o)=>{d=o,c=e}));p[o]=u,p[e]=e=>(i&&e(i),l.forEach(e),p.catch((e=>{}))),n.exports=p,s((n=>{var s;_=(n=>n.map((n=>{if(null!==n&&"object"==typeof n){if(n[e])return n;if(n.then){var s=[];s.d=0,n.then((e=>{a[o]=e,t(s)}),(e=>{a[r]=e,t(s)}));var a={};return a[e]=e=>e(s),a}}var i={};return i[e]=e=>{},i[o]=n,i})))(n);var a=()=>_.map((e=>{if(e[r])throw e[r];return e[o]})),c=new Promise((o=>{(s=()=>o(a)).r=0;var r=e=>e!==i&&!l.has(e)&&(l.add(e),e&&!e.d&&(s.r++,e.push(s)));_.map((o=>o[e](r)))}));return s.r?c:a()}),(e=>(e?d(p[r]=e):c(u),t(i)))),i&&i.d<0&&(i.d=0)},a.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return a.d(o,{a:o}),o},a.d=(e,o)=>{for(var r in o)a.o(o,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},a.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),a(740)})();